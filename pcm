import numpy as np
import matplotlib.pyplot as plt

#parametes
amplitude=1
frequency=5
time=1
sampling_rate=100
dc_offset=amplitude
quantization_levels=[2**n for n in range(1,8)]

#fn for quantization 
def quantization(signal,levels):
    maximum=np.max(signal)
    minimum=np.min(signal)
    q_levels=np.linspace(minimum,maximum,levels)
    q_signals=np.digitize(signal,q_levels)-1
    return q_signals,q_levels[q_signals]

#fn for snr compute
def snr_compute(original,quantised):
    noise=original-quantised
    snr=10*np.log10(np.sum(original**2)/np.sum(noise**2))
    return snr

#plotting
time=np.linspace(0,1,int(sampling_rate*time))
waveform=amplitude*np.sin(2*np.pi*frequency*time)+dc_offset

#creating snr list
snr_list=[]
for l in quantization_levels:
    #quantize waveform
    quant_sig,quant_values=quantization(waveform,l)

    #snr computation
    snr=snr_compute(waveform,quant_values)
    snr_list.append(snr)

#plotting quantised signal
plt.figure()
plt.subplot(3,1,1)
plt.step(np.arange(len(waveform)),quant_values,label='quantised signal',where='mid',color='red')
plt.legend()
plt.grid(True)
reconstructed_signal = quant_sig

#plotting original waveform 
plt.subplot(3,1,1)
plt.plot(waveform,label='original waveform')
plt.title('original waveform')
plt.xlabel('no of samples')
plt.ylabel('amplitude')
plt.legend()
plt.grid(True)
plt.tight_layout()

#plotting of snr
bits=np.log2(quantization_levels)
plt.subplot(3,1,2)
plt.plot(bits,snr_list,label='snr v/s no of bits',marker='o',color='black')
plt.title('snr')
plt.xlabel('no of bits')
plt.ylabel('snr')
plt.legend()
plt.grid(True)
plt.tight_layout()

# Plot reconstructed signal (PCM)
plt.subplot(3, 1, 3)
plt.plot(time,reconstructed_signal, label='Reconstructed Signal (PCM)', linestyle='--', color='orange')
plt.title('Reconstructed Signal (PCM)')
plt.xlabel('Time (seconds)')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
