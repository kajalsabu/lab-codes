import numpy as np
import matplotlib.pyplot as plt

# Parameters
Tb = 1 # Bit duration (seconds)
Fs = 1000 # Sampling frequency (Hz)
rolloff_factor = 0.5 # Roll-off factor for root raised cosine pulse
SNR_dB = 10 # Signal-to-Noise Ratio (dB)

# Generate baseband signal using root raised cosine pulse
def root_raised_cosine(t):
    pulse = np.sinc(t / Tb) * np.cos(np.pi * rolloff_factor * t / Tb) / (1 - (2 * rolloff_factor * t / Tb) ** 2)
    return pulse

# Generate message bits
message_bits =[1,0,0,1,0,0,1,0,1] #example message has been written here

# Generate time array for one bit duration
t = np.arange(0,Tb, 1/Fs)

# Generate root raised cosine pulse
pulse = root_raised_cosine(t - Tb/2)

# Upsample message bits and apply pulse shaping
baseband_signal = np.zeros(len(message_bits) * Fs)
for i, bit in enumerate(message_bits):
    baseband_signal[i * Fs : (i + 1) * Fs] = bit * pulse

# Simulate transmission through AWGN channel
noise_power = 10 ** (-SNR_dB / 10)
noise = np.sqrt(noise_power) * np.random.randn(len(baseband_signal))
received_signal = baseband_signal + noise

# Apply matched filter
matched_filter = pulse[::-1] # Matched filter impulse response is the time-reversed pulse
filtered_signal = np.convolve(received_signal, matched_filter, mode='same') / Fs

#Retrieve the signal using downsampling
retrieved=[0,0,0,0,0,0,0,0,0]
for i in range(0,9):
    retrieved[i]=filtered_signal[int((i*Fs)+(Fs/2))]

# Plot signals
plt.figure()

plt.subplot(5, 1, 1)
plt.stem(message_bits)
plt.title('Message Bits')
plt.xlabel('Bit Index')
plt.ylabel('Value (0 or 1)')
plt.grid(True)

plt.subplot(5, 1, 2)
plt.plot(t, pulse)
plt.title('Root Raised Cosine Pulse')
plt.xlabel('Time (seconds)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.subplot(5, 1, 3)
plt.plot(baseband_signal)
plt.title('Baseband Signal with Pulse Shaping')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid(True)

plt.subplot(5, 1, 4)
plt.plot(filtered_signal)
plt.title('Filtered Signal (Matched Filter Output)')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid(True)

plt.subplot(5, 1, 5)
plt.stem(retrieved)
plt.title('Reconstructed signal')
plt.xlabel('Bit Index')
plt.ylabel('Amplitude')
plt.grid(True)

plt.tight_layout()
plt.show()
