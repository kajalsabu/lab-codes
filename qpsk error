import numpy as np
import matplotlib.pyplot as plt
from scipy.special import erfc

# Function to simulate BPSK transmission and calculate the bit error rate (BER)
def simulate_qpsk(Eb_N0_dB,num_bits=1000000):

    # Convert Eb/N0 dB to linear value
    Eb_N0 = 10**(Eb_N0_dB/10)

    # Generate random bit sequence
    bits = np.random.choice([0, 1], size=num_bits)



    # Map bits to QPSK symbols (real and imaginary parts)
    real_part = 2 * bits[::2] - 1  #even positions
    imag_part = 2 * bits[1::2] - 1  #odd positions
    symbols = real_part + 1j * imag_part

     # Add AWGN
    noise_std = np.sqrt(1 / (2 * Eb_N0))
    noise = noise_std * (np.random.randn(num_bits // 2) + 1j * np.random.randn(num_bits // 2))
    received_symbols = symbols + noise

    # Demodulate symbols
    demodulated_bits = np.zeros(num_bits)
    demodulated_bits[::2] = np.real(received_symbols) > 0
    demodulated_bits[1::2] = np.imag(received_symbols) > 0

    # Calculate the number of bit errors
    bit_errors = np.sum(bits != demodulated_bits)

    # Calculate the bit error rate (BER)
    ber = bit_errors / num_bits
    return ber

# Range of Eb/N0 values for which to simulate
Eb_N0_dB_range = np.arange(0, 11, 1)

# Simulate BER for the range of Eb/N0 values
ber_simulated = [simulate_qpsk(Eb_N0_dB) for Eb_N0_dB in Eb_N0_dB_range]

# Theoretical BER for BPSK over AWGN
ber_theoretical = 0.5 * erfc(np.sqrt(10**(Eb_N0_dB_range/10)))

# Plotting the results
plt.figure
plt.semilogy(Eb_N0_dB_range, ber_simulated , 'o-', label='Simulated ber')
plt.semilogy(Eb_N0_dB_range, ber_theoretical, 's-', label='Theoretical ber')
plt.xlabel('Eb/N0 (dB)')
plt.ylabel('Bit Error Rate (BER)')
plt.title('QPSK over AWGN Channel')
plt.legend()
plt.grid(True)
plt.show()
